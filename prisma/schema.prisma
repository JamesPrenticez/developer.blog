datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  //shadowDatabaseUrl = env("SHADOW_DATABASE_URL") // Only needed when using a cloud provider that doesn't support the creation of new databases, like Heroku. Learn more: https://pris.ly/migrate-shadow
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String? 
  access_token       String?  
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id            String   @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  postLikes     PostLike[]
  commentLikes CommentLike[]
  accounts      Account[]
  sessions      Session[]
  posts         Post[]
}

model Post {
  id          String   @id @default(cuid())
  title       String
  description String
  slug        String? @unique
  content     String?
  image       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  published   Boolean @default(false)
  comments    Comment[]
  postLikes   PostLike[]
  author      User?   @relation(fields: [authorId], references: [id])
  authorId    String?
}

model Comment {
  id           String   @id @default(cuid())
  name         String
  email        String
  comment      String
  approved     Boolean @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  commentLikes CommentLike[]
  post         Post?   @relation(fields: [postId], references: [id])
  postId       String?
}

model PostLike {
  id          String   @id @default(cuid())
  user        User?   @relation(fields: [userId], references: [id])
  userId      String?
  post        Post?   @relation(fields: [postId], references: [id])
  postId      String?
}

model CommentLike {
  id          String   @id @default(cuid())
  user        User?   @relation(fields: [userId], references: [id])
  userId      String?
  comment     Comment?   @relation(fields: [commentId], references: [id])
  commentId      String?
}